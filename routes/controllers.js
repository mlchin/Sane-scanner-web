const scan_doc_root="/home/pi/ScanDocuments/",FnsFile="./public/javascripts/filenames.txt";function isScannerOn(){const execSync=require("child_process").execSync;try{const output=execSync("sane-find-scanner");return/found USB scanner/i.test(output.toString())?{found:!0}:{found:!1}}catch(error){throw new Error("Unknown error running command: sane-find-scanner.")}}function isValidFilename(filename){if(""===(filename=filename.trim()))return{valid:!1};return/^[0-9a-zA-Z_][0-9a-zA-Z_-]*$/.test(filename)?{valid:!0}:{valid:!1}}function isDuplicateFilename(filename){const existsSync=require("fs").existsSync();return""===(filename=filename.trim())?{duplicate:!1}:existsSync(scan_doc_root+filename)?{duplicate:!0}:{duplicate:!1}}function writeFnsFile(){const readdir=require("fs").readdir,writeFile=require("fs").writeFile;readdir(scan_doc_root,(function(err,files){if(err)return console.log("++ ERROR: Cannot read directory for filenames."),{success:!1};var jsonData={};jsonData.files=files,writeFile(FnsFile,JSON.stringify(jsonData),(function(err){return err?(console.log("++ ERROR: Problem while writing filenames to file."),{success:!1}):(console.log(`++ ${files.length} files found and written to file.`),{success:!0})}))}))}function readFnsFile(){const existsSync=require("fs").existsSync,readFileSync=require("fs").readFileSync;try{if(existsSync(FnsFile))try{const data=readFileSync(FnsFile);return{success:!0,files:JSON.parse(data).files}}catch(error){return console.log("++ ERROR: Could not read filenames from file."),{success:!1,files:[]}}}catch(error){return console.log("++ ERROR: Filenames file does not exist."),{success:!1,files:[]}}}module.exports.isScannerOn=isScannerOn,module.exports.isValidFilename=isValidFilename,module.exports.isDuplicateFilename=isDuplicateFilename,module.exports.writeFnsFile=writeFnsFile,module.exports.readFnsFile=readFnsFile;